{"ast":null,"code":"import axios from 'axios';\nimport uploadFileTypes from './uploadFile.types';\nexport const setUploadFile = data => ({\n  type: uploadFileTypes.SET_UPLOAD_FILE,\n  payload: data\n});\nexport const setUploadProgress = (id, progress) => ({\n  type: uploadFileTypes.SET_UPLOAD_PROGRESS,\n  payload: {\n    id,\n    progress\n  }\n});\nexport const successUploadFile = id => ({\n  type: uploadFileTypes.SUCCESS_UPLOAD_FILE,\n  payload: id\n});\nexport const failureUploadFile = id => ({\n  type: uploadFileTypes.FAILURE_UPLOAD_FILE,\n  payload: id\n});\nexport const uploadFile = files => dispatch => {\n  if (files.length) {\n    files.forEach(async file => {\n      const formPayload = new FormData();\n      formPayload.append('file', file.file);\n\n      try {\n        await axios({\n          baseURL: 'http://localhost:5000',\n          url: '/file',\n          method: 'post',\n          data: formPayload,\n          onUploadProgress: progress => {\n            const {\n              loaded,\n              total\n            } = progress;\n            const percentageProgress = Math.floor(loaded / total * 100);\n            dispatch(setUploadProgress(file.id, percentageProgress));\n          }\n        });\n        dispatch(successUploadFile(file.id));\n      } catch (error) {\n        dispatch(failureUploadFile(file.id));\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/innodeed/samanth/react/uploader/src/redux/uploadFile/uploadFile.actions.js"],"names":["axios","uploadFileTypes","setUploadFile","data","type","SET_UPLOAD_FILE","payload","setUploadProgress","id","progress","SET_UPLOAD_PROGRESS","successUploadFile","SUCCESS_UPLOAD_FILE","failureUploadFile","FAILURE_UPLOAD_FILE","uploadFile","files","dispatch","length","forEach","file","formPayload","FormData","append","baseURL","url","method","onUploadProgress","loaded","total","percentageProgress","Math","floor","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AAEA,OAAO,MAAMC,aAAa,GAAGC,IAAI,KAAK;AACpCC,EAAAA,IAAI,EAAEH,eAAe,CAACI,eADc;AAEpCC,EAAAA,OAAO,EAAEH;AAF2B,CAAL,CAA1B;AAKP,OAAO,MAAMI,iBAAiB,GAAG,CAACC,EAAD,EAAKC,QAAL,MAAmB;AAClDL,EAAAA,IAAI,EAAEH,eAAe,CAACS,mBAD4B;AAElDJ,EAAAA,OAAO,EAAE;AACPE,IAAAA,EADO;AAEPC,IAAAA;AAFO;AAFyC,CAAnB,CAA1B;AAQP,OAAO,MAAME,iBAAiB,GAAGH,EAAE,KAAK;AACtCJ,EAAAA,IAAI,EAAEH,eAAe,CAACW,mBADgB;AAEtCN,EAAAA,OAAO,EAAEE;AAF6B,CAAL,CAA5B;AAKP,OAAO,MAAMK,iBAAiB,GAAGL,EAAE,KAAK;AACtCJ,EAAAA,IAAI,EAAEH,eAAe,CAACa,mBADgB;AAEtCR,EAAAA,OAAO,EAAEE;AAF6B,CAAL,CAA5B;AAKP,OAAO,MAAMO,UAAU,GAAGC,KAAK,IAAIC,QAAQ,IAAI;AAC7C,MAAID,KAAK,CAACE,MAAV,EAAkB;AAChBF,IAAAA,KAAK,CAACG,OAAN,CAAc,MAAMC,IAAN,IAAc;AAC1B,YAAMC,WAAW,GAAG,IAAIC,QAAJ,EAApB;AACAD,MAAAA,WAAW,CAACE,MAAZ,CAAmB,MAAnB,EAA2BH,IAAI,CAACA,IAAhC;;AAEA,UAAI;AACF,cAAMpB,KAAK,CAAC;AACVwB,UAAAA,OAAO,EAAE,uBADC;AAEVC,UAAAA,GAAG,EAAE,OAFK;AAGVC,UAAAA,MAAM,EAAE,MAHE;AAIVvB,UAAAA,IAAI,EAAEkB,WAJI;AAKVM,UAAAA,gBAAgB,EAAElB,QAAQ,IAAI;AAC5B,kBAAM;AAAEmB,cAAAA,MAAF;AAAUC,cAAAA;AAAV,gBAAoBpB,QAA1B;AAEA,kBAAMqB,kBAAkB,GAAGC,IAAI,CAACC,KAAL,CAAYJ,MAAM,GAAGC,KAAV,GAAmB,GAA9B,CAA3B;AACAZ,YAAAA,QAAQ,CAACV,iBAAiB,CAACa,IAAI,CAACZ,EAAN,EAAUsB,kBAAV,CAAlB,CAAR;AACD;AAVS,SAAD,CAAX;AAYAb,QAAAA,QAAQ,CAACN,iBAAiB,CAACS,IAAI,CAACZ,EAAN,CAAlB,CAAR;AACD,OAdD,CAcE,OAAOyB,KAAP,EAAc;AACdhB,QAAAA,QAAQ,CAACJ,iBAAiB,CAACO,IAAI,CAACZ,EAAN,CAAlB,CAAR;AACD;AACF,KArBD;AAsBD;AACF,CAzBM","sourcesContent":["import axios from 'axios'\nimport uploadFileTypes from './uploadFile.types'\n\nexport const setUploadFile = data => ({\n  type: uploadFileTypes.SET_UPLOAD_FILE,\n  payload: data,\n})\n\nexport const setUploadProgress = (id, progress) => ({\n  type: uploadFileTypes.SET_UPLOAD_PROGRESS,\n  payload: {\n    id,\n    progress,\n  },\n})\n\nexport const successUploadFile = id => ({\n  type: uploadFileTypes.SUCCESS_UPLOAD_FILE,\n  payload: id,\n})\n\nexport const failureUploadFile = id => ({\n  type: uploadFileTypes.FAILURE_UPLOAD_FILE,\n  payload: id,\n})\n\nexport const uploadFile = files => dispatch => {\n  if (files.length) {\n    files.forEach(async file => {\n      const formPayload = new FormData()\n      formPayload.append('file', file.file)\n\n      try {\n        await axios({\n          baseURL: 'http://localhost:5000',\n          url: '/file',\n          method: 'post',\n          data: formPayload,\n          onUploadProgress: progress => {\n            const { loaded, total } = progress\n\n            const percentageProgress = Math.floor((loaded / total) * 100)\n            dispatch(setUploadProgress(file.id, percentageProgress))\n          },\n        })\n        dispatch(successUploadFile(file.id))\n      } catch (error) {\n        dispatch(failureUploadFile(file.id))\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}